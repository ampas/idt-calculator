[tool.poetry]
name = "idt-calculator"
version = "0.1.0"
description = "An ACES Input Device Transform (IDT) calculator"
license = "License Terms for Academy Color Encoding System Components"
authors = [ "Alex Forsythe <aforsythe@oscars.org>", "Thomas Mansencal <thomas.mansencal@gmail.com>" ]
maintainers = [ "Academy of Motion Picture Arts and Sciences <aforsythe@oscars.org >" ]
readme = 'README.md'
repository = "https://github.com/ampas/idt-calculator"
homepage = "https://www.oscars.org/science-technology/sci-tech-projects/aces"
keywords = [
    "aces",
    "ampas",
    "color",
    "color-science",
    "color-space",
    "color-spaces",
    "colorspace",
    "colorspaces",
    "colour",
    "colour-science",
    "colour-space",
    "colour-spaces",
    "colourspace",
    "colourspaces",
    "dash",
    "docker",
    "python"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development"
]

[tool.poetry.dependencies]
python = ">= 3.11, < 3.14"
colour-datasets = ">= 0.2.5"
colour-checker-detection = ">= 0.2.1"
colour_science = ">= 0.4.5"
dash = "*"
dash-bootstrap-components = "*"
dash-renderer = "*"
dash-uploader = "*"
gunicorn = "*"
imageio = ">= 2, < 3"
pandas = ">= 1.4, < 2.3"
jsonpickle = ">= 2, < 3"
matplotlib = ">= 3.5, != 3.5.0, != 3.5.1"
networkx = ">= 2.7, < 3"
numpy = ">= 1.22, < 2"
packaging = "<= 21.3"  # Later versions currently break with Dash Uploader.
scipy = ">= 1.8, < 2"
plotly = "*"
typing-extensions = ">= 4, < 5"
xxhash = ">= 3, <4"

[tool.poetry.group.dev.dependencies]
coverage = "!= 6.3"
coveralls = "*"
invoke = "*"
pre-commit = "*"
pyright = "*"
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
toml = "*"

[tool.flynt]
line_length = 999

[tool.isort]
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 88
multi_line_output = 3
split_on_trailing_comma = true
use_parentheses = true

[tool.pyright]
reportMissingImports = false
reportMissingModuleSource = false
reportUnboundVariable = false
reportUnnecessaryCast = true
reportUnnecessaryTypeIgnorComment = true
reportUnsupportedDunderAll = false
reportUnusedExpression = false

[tool.pytest.ini_options]
addopts = "-n auto --dist=loadscope --durations=5"

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "A", # flake8-builtins
    "ARG", # flake8-unused-arguments
    # "ANN", # flake8-annotations
    "B", # flake8-bugbear
    # "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    # "C90", # mccabe
    # "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "D", # pydocstyle
    "E", # pydocstyle
    # "ERA", # eradicate
    # "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "F", # flake8
    # "FBT", # flake8-boolean-trap
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    # "PD", # pandas-vet
    "PIE", # flake8-pie
    "PGH", # pygrep-hooks
    "PL", # pylint
    # "PT", # flake8-pytest-style
    # "PTH", # flake8-use-pathlib [Enable]    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    # "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pydocstyle
    "YTT", # flake8-2020
]
ignore = [
    "B008",
    "B905",
    "D104",
    "D200",
    "D202",
    "D205",
    "D301",
    "D400",
    "I001",
    "N801",
    "N802",
    "N803",
    "N806",
    "N813",
    "N815",
    "N816",
    "PGH003",
    "PIE804",
    "PLE0605",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLR2004",
    "RET504",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "TRY003",
    "TRY300",
]
typing-modules = ["colour.hints"]
fixable = ["B", "C", "E", "F", "PIE", "RUF", "SIM", "UP", "W"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"tasks.py" = ["INP"]

[tool.ruff.format]
docstring-code-format = true

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
